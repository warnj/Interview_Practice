package Tests;

import Specific_Questions.Sudoku;
import org.junit.Test;

import static org.junit.Assert.*;

public class SudokuTest {

	@Test
	public void testSudokuSolver() {
        // easy question that basic elimination can solve
        char[][] board = new char[][]{
            {'5','3','.','.','7','.','.','.','.'},
            {'6','.','.','1','9','5','.','.','.'},
            {'.','9','8','.','.','.','.','6','.'},
            {'8','.','.','.','6','.','.','.','3'},
            {'4','.','.','8','.','3','.','.','1'},
            {'7','.','.','.','2','.','.','.','6'},
            {'.','6','.','.','.','.','2','8','.'},
            {'.','.','.','4','1','9','.','.','5'},
            {'.','.','.','.','8','.','.','7','9'}
        };
        Sudoku.solveSudoku(board);
        char[][] solved = new char[][]{
            {'5','3','4','6','7','8','9','1','2'},
            {'6','7','2','1','9','5','3','4','8'},
            {'1','9','8','3','4','2','5','6','7'},
            {'8','5','9','7','6','1','4','2','3'},
            {'4','2','6','8','5','3','7','9','1'},
            {'7','1','3','9','2','4','8','5','6'},
            {'9','6','1','5','3','7','2','8','4'},
            {'2','8','7','4','1','9','6','3','5'},
            {'3','4','5','2','8','6','1','7','9'}
        };
        assertArrayEquals(solved, board);
	}

    // hard sudoku where basic elimination will not work, reaches point where must guess and check
    private static char[][] hardBoard = new char[][]{
            {'.','.','9','7','4','8','.','.','.'},
            {'7','.','.','.','.','.','.','.','.'},
            {'.','2','.','1','.','9','.','.','.'},
            {'.','.','7','.','.','.','2','4','.'},
            {'.','6','4','.','1','.','5','9','.'},
            {'.','9','8','.','.','.','3','.','.'},
            {'.','.','.','8','.','3','.','2','.'},
            {'.','.','.','.','.','.','.','.','6'},
            {'.','.','.','2','7','5','9','.','.'}
    };
    private static char[][] hardBoardSolved = new char[][]{
            {'5','1','9','7','4','8','6','3','2'},
            {'7','8','3','6','5','2','4','1','9'},
            {'4','2','6','1','3','9','8','7','5'},
            {'3','5','7','9','8','6','2','4','1'},
            {'2','6','4','3','1','7','5','9','8'},
            {'1','9','8','5','2','4','3','6','7'},
            {'9','7','5','8','6','3','1','2','4'},
            {'8','3','2','4','9','1','7','5','6'},
            {'6','4','1','2','7','5','9','8','3'}
    };
  @Test
  public void testSudokuSolverHard() {
      char[][] board = new char[9][9];
      System.arraycopy(hardBoard, 0, board, 0, hardBoard.length);
      Sudoku.solveSudokuBacktracingEfficient(board);
//    System.out.println(Arrays.deepToString(board).replace("], ", "]\n"));
      assertArrayEquals(hardBoardSolved, board);

      char[][] board2 = new char[9][9];
      System.arraycopy(hardBoard, 0, board2, 0, hardBoard.length);
      Sudoku.solveSudokuBacktracing(board2);
      assertArrayEquals(hardBoardSolved, board2);
  }

    @Test
    public void testSudokuSolverHardest() {
        // worlds hardest sudoku per abc news: https://www.conceptispuzzles.com/index.aspx?uri=info/article/424
        char[][] board = new char[][]{
                {'8','.','.','.','.','.','.','.','.'},
                {'.','.','3','6','.','.','.','.','.'},
                {'.','7','.','.','9','.','2','.','.'},
                {'.','5','.','.','.','7','.','.','.'},
                {'.','.','.','.','4','5','7','.','.'},
                {'.','.','.','1','.','.','.','3','.'},
                {'.','.','1','.','.','.','.','6','8'},
                {'.','.','8','5','.','.','.','1','.'},
                {'.','9','.','.','.','.','4','.','.'}
        };
        Sudoku.solveSudokuBacktracingEfficient(board);
        char[][] solved = new char[][]{
                {'8','1','2','7','5','3','6','4','9'},
                {'9','4','3','6','8','2','1','7','5'},
                {'6','7','5','4','9','1','2','8','3'},
                {'1','5','4','2','3','7','8','9','6'},
                {'3','6','9','8','4','5','7','2','1'},
                {'2','8','7','1','6','9','5','3','4'},
                {'5','2','1','9','7','4','3','6','8'},
                {'4','3','8','5','2','6','9','1','7'},
                {'7','9','6','3','1','8','4','5','2'},
        };
        assertArrayEquals(solved, board);
    }

  @Test
  public void testSudokuValid() {
    char[][] board = new char[][]{
        {'5','3','.','.','7','.','.','.','.'},
        {'6','.','.','1','9','5','.','.','.'},
        {'.','9','8','.','.','.','.','6','.'},
        {'8','.','.','.','6','.','.','.','3'},
        {'4','.','.','8','.','3','.','.','1'},
        {'7','.','.','.','2','.','.','.','6'},
        {'.','6','.','.','.','.','2','8','.'},
        {'.','.','.','4','1','9','.','.','5'},
        {'.','.','.','.','8','.','.','7','9'}
    };
    assertTrue(Sudoku.isValidSudoku(board));
    board = new char[][]{
        {'5','3','4','6','7','8','9','1','2'},
        {'6','7','2','1','9','5','3','4','8'},
        {'1','9','8','3','4','2','5','6','7'},
        {'8','5','9','7','6','1','4','2','3'},
        {'4','2','6','8','5','3','7','9','1'},
        {'7','1','3','9','2','4','8','5','6'},
        {'9','6','1','5','3','7','2','8','4'},
        {'2','8','7','4','1','9','6','3','5'},
        {'3','4','5','2','8','6','1','7','9'}
    };
    assertTrue(Sudoku.isValidSudoku(board));
    board = new char[][]{
        {'8','3','.','.','7','.','.','.','.'},
        {'6','.','.','1','9','5','.','.','.'},
        {'.','9','8','.','.','.','.','6','.'},
        {'8','.','.','.','6','.','.','.','3'},
        {'4','.','.','8','.','3','.','.','1'},
        {'7','.','.','.','2','.','.','.','6'},
        {'.','6','.','.','.','.','2','8','.'},
        {'.','.','.','4','1','9','.','.','5'},
        {'.','.','.','.','8','.','.','7','9'}
    };
    assertFalse(Sudoku.isValidSudoku(board));
  }
}
